;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void WDT_ON(){
; 0000 0013 void WDT_ON(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0014 WDTCR = (1 << WDE) | (1 << WDP2) | (1 << WDP1) | (1<<WDP0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0015 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;void WDT_OFF(){
; 0000 0017 void WDT_OFF(){
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0018 WDTCR = (1 << WDTOE)|(1<<WDE);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0019 WDTCR = 0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001A }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;void init(){
; 0000 001C void init(){
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001D UBRRH = 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001E UBRRL = 25; // baud rate = 2400
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 001F 
; 0000 0020 UCSRA = 0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0021 UCSRB = (1 << RXEN)|(1 << TXEN)|(1 << RXCIE)|(1 << TXCIE); // transform and recive and interrupt
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0022 UCSRC = (1 << URSEL)|(1 << UCSZ1)|(1 << UCSZ0); // data = 8 bit
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0023 
; 0000 0024 
; 0000 0025 TCCR1B = (1 << CS12)|(1 << CS10);   // chon prescaler = 1024
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0026 TCNT1 = 65047;    // dat gia tri khoi dau
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0027 TIMSK = (1 << TOIE1);  // cho phep ngat
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0028 
; 0000 0029 #asm("sei")   // enable interrupt
;PCODE: $0000002D VOL: 0
; 0000 002A 
; 0000 002B // set init for i2c
; 0000 002C TWBR = 0x20;    /* Get bit rate register value by formula */
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002D 
; 0000 002E }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;void I2C_Start(char write_address)
; 0000 0033 {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0034 TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;	write_address -> R17
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0035 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0036 
; 0000 0037 TWDR = write_address;        /* Write SLA+W in TWI data register */
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0038 TWCR = (1<<TWEN)|(1<<TWINT);    /* Enable TWI & clear interrupt flag */
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0039 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003A }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;void I2C_Repeated_Start(char read_address)
; 0000 003D {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 003E TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);/* Enable TWI, generate start */
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;	read_address -> R17
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003F while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0040 
; 0000 0041 TWDR=read_address;        /* Write SLA+R in TWI data register */
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0042 TWCR=(1<<TWEN)|(1<<TWINT);    /* Enable TWI and clear interrupt flag */
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0043 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0044 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;void I2C_Write(char data)
; 0000 0047 {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0048 TWDR=data;            /* Copy data in TWI data register */
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;	data -> R17
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0049 TWCR=(1<<TWEN)|(1<<TWINT);    /* Enable TWI and clear interrupt flag */
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 004A while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 004B }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;char I2C_Read_Ack()
; 0000 004E {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 004F TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); /* Enable TWI, generation of ack */
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0050 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0051 return TWDR;            /* Return received data */
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0052 }
;PCODE: $00000081 VOL: 0
;char I2C_Read_Nack()
; 0000 0055 {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0056 TWCR=(1<<TWEN)|(1<<TWINT);    /* Enable TWI and clear interrupt flag */
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0057 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0058 return TWDR;        /* Return received data */
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0059 }
;PCODE: $0000008E VOL: 0
;void I2C_Stop()
; 0000 005C {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 005D TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 005E while(TWCR&(1<<TWSTO));    /* Wait until stop condition execution */
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 005F }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;void read(){
; 0000 0063 void read(){
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0064 /*-------------------------------- Doc do am  ------------------------------------------*/
; 0000 0065 I2C_Start(dht_addr); /* Start I2C with device write address */
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0066 I2C_Write(0x00);        /* Write start memory address */
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0067 I2C_Repeated_Start(dht_addr | 1);/* Repeat start I2C SLA+R */
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0068 value[0] = I2C_Read_Ack();    /* read humidity */
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0069 value[1] = I2C_Read_Nack();   /* read humidity scale */
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 006A I2C_Stop();
;PCODE: $000000A9 VOL: 0
; 0000 006B 
; 0000 006C /*------------------------------- Doc nhiet do -----------------------------------------*/
; 0000 006D I2C_Start(dht_addr); /* Start I2C with device write address */
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 006E I2C_Write(0x02);        /* Write start memory address */
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 006F I2C_Repeated_Start(dht_addr | 1);/* Repeat start I2C SLA+R */
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0070 value[2] = I2C_Read_Ack();    /* read Temperature */
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0071 value[3] = I2C_Read_Nack();   /* read Temperature scale */
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0072 I2C_Stop();
;PCODE: $000000B6 VOL: 0
; 0000 0073 /*value[0] = 'a';
; 0000 0074 value[1] = 'b';
; 0000 0075 value[2] = 'c';
; 0000 0076 value[3] = 'd';*/
; 0000 0077 if(UCSRA & (1 << UDRE)){
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0078 UDR = value[j++];
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0079 }
; 0000 007A }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;interrupt [14] void uart_txc(void)
; 0000 007F {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0080 if(j < 4){
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0081 UDR = value[j++];
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0082 }
; 0000 0083 }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;interrupt [12] void uart_rxc(void)
; 0000 0087 {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0088 receiv = UDR;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0089 if(receiv == '0'){
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 008A PORTB = 0xFF;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 008B j = 0;
;PCODE: $000000DD VOL: 0
; 0000 008C value[0] = value[1] = value[3] = value[2] = 0;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 008D read();
;PCODE: $000000E6 VOL: 0
; 0000 008E }
; 0000 008F receiv = '1';
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0090 }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;interrupt [9] void timer_trans(void)
; 0000 0093 {
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0094 TCNT1 = 65047;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0095 j = 0;
;PCODE: $000000F1 VOL: 0
; 0000 0096 read();
;PCODE: $000000F2 VOL: 0
; 0000 0097 }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;void main(void)
; 0000 009D {
;PCODE: $000000F6 VOL: 0
; 0000 009E init();
;PCODE: $000000F7 VOL: 0
; 0000 009F DDRA = 0xFF;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00A0 DDRB = 0xFF;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00A1 while (1)
;PCODE: $000000FC VOL: 0
; 0000 00A2 {
; 0000 00A3 WDT_ON();
;PCODE: $000000FD VOL: 0
; 0000 00A4 PORTA = 0xFF;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00A5 delay_ms(100);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00A6 WDT_OFF();
;PCODE: $00000103 VOL: 0
; 0000 00A7 
; 0000 00A8 PORTA = 0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00A9 delay_ms(100);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00AA }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00AB }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
