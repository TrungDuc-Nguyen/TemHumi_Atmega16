
AVRASM ver. 2.1.30  D:\code\thietbingoaivi\Debug\List\atmega16.asm Mon Jun 22 12:28:48 2020

D:\code\thietbingoaivi\Debug\List\atmega16.asm(1083): warning: Register r4 already defined by the .DEF directive
D:\code\thietbingoaivi\Debug\List\atmega16.asm(1084): warning: Register r5 already defined by the .DEF directive
D:\code\thietbingoaivi\Debug\List\atmega16.asm(1085): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.41 Evaluation
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _j=R4
                 	.DEF _j_msb=R5
                 	.DEF _receiv=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 00f0 	JMP  _timer_trans
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 00da 	JMP  _uart_rxc
000018 940c 0000 	JMP  0x00
00001a 940c 00cb 	JMP  _uart_txc
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 3100      	.DB  0x0,0x0,0x0,0x31
                 
                 
                 __GLOBAL_INI_TBL:
000035 0004      	.DW  0x04
000036 0004      	.DW  0x04
000037 0066      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000040 e08d      	LDI  R24,(14-2)+1
000041 e0a2      	LDI  R26,2
000042 27bb      	CLR  R27
                 __CLEAR_REG:
000043 93ed      	ST   X+,R30
000044 958a      	DEC  R24
000045 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000046 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000047 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000048 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000049 93ed      	ST   X+,R30
00004a 9701      	SBIW R24,1
00004b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004c e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004e 9185      	LPM  R24,Z+
00004f 9195      	LPM  R25,Z+
000050 9700      	SBIW R24,0
000051 f061      	BREQ __GLOBAL_INI_END
000052 91a5      	LPM  R26,Z+
000053 91b5      	LPM  R27,Z+
000054 9005      	LPM  R0,Z+
000055 9015      	LPM  R1,Z+
000056 01bf      	MOVW R22,R30
000057 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000058 9005      	LPM  R0,Z+
000059 920d      	ST   X+,R0
00005a 9701      	SBIW R24,1
00005b f7e1      	BRNE __GLOBAL_INI_LOOP
00005c 01fb      	MOVW R30,R22
00005d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005f bfed      	OUT  SPL,R30
000060 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000061 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000062 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000063 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000064 940c 0103 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void WDT_ON(){
                 ; 0000 0013 void WDT_ON(){
                 
                 	.CSEG
                 _WDT_ON:
                 ; .FSTART _WDT_ON
                 ; 0000 0014 WDTCR = (1 << WDE) | (1 << WDP2) | (1 << WDP1) | (1<<WDP0);
000066 e0ef      	LDI  R30,LOW(15)
000067 c003      	RJMP _0x2060003
                 ; 0000 0015 }
                 ; .FEND
                 ;void WDT_OFF(){
                 ; 0000 0017 void WDT_OFF(){
                 _WDT_OFF:
                 ; .FSTART _WDT_OFF
                 ; 0000 0018 WDTCR = (1 << WDTOE)|(1<<WDE);
000068 e1e8      	LDI  R30,LOW(24)
000069 bde1      	OUT  0x21,R30
                 ; 0000 0019 WDTCR = 0x00;
00006a e0e0      	LDI  R30,LOW(0)
                 _0x2060003:
00006b bde1      	OUT  0x21,R30
                 ; 0000 001A }
00006c 9508      	RET
                 ; .FEND
                 ;void init(){
                 ; 0000 001C void init(){
                 _init:
                 ; .FSTART _init
                 ; 0000 001D UBRRH = 0;
00006d e0e0      	LDI  R30,LOW(0)
00006e bde0      	OUT  0x20,R30
                 ; 0000 001E UBRRL = 25; // baud rate = 2400
00006f e1e9      	LDI  R30,LOW(25)
000070 b9e9      	OUT  0x9,R30
                 ; 0000 001F 
                 ; 0000 0020 UCSRA = 0x00;
000071 e0e0      	LDI  R30,LOW(0)
000072 b9eb      	OUT  0xB,R30
                 ; 0000 0021 UCSRB = (1 << RXEN)|(1 << TXEN)|(1 << RXCIE)|(1 << TXCIE); // transform and recive and interrupt
000073 ede8      	LDI  R30,LOW(216)
000074 b9ea      	OUT  0xA,R30
                 ; 0000 0022 UCSRC = (1 << URSEL)|(1 << UCSZ1)|(1 << UCSZ0); // data = 8 bit
000075 e8e6      	LDI  R30,LOW(134)
000076 bde0      	OUT  0x20,R30
                 ; 0000 0023 
                 ; 0000 0024 
                 ; 0000 0025 TCCR1B = (1 << CS12)|(1 << CS10);   // chon prescaler = 1024
000077 e0e5      	LDI  R30,LOW(5)
000078 bdee      	OUT  0x2E,R30
                 ; 0000 0026 TCNT1 = 65047;    // dat gia tri khoi dau
000079 d095      	RCALL SUBOPT_0x0
                 ; 0000 0027 TIMSK = (1 << TOIE1);  // cho phep ngat
00007a e0e4      	LDI  R30,LOW(4)
00007b bfe9      	OUT  0x39,R30
                 ; 0000 0028 
                 ; 0000 0029 #asm("sei")   // enable interrupt
00007c 9478      	SEI
                 ; 0000 002A 
                 ; 0000 002B // set init for i2c
                 ; 0000 002C TWBR = 0x20;    /* Get bit rate register value by formula */
00007d e2e0      	LDI  R30,LOW(32)
00007e b9e0      	OUT  0x0,R30
                 ; 0000 002D 
                 ; 0000 002E }
00007f 9508      	RET
                 ; .FEND
                 ;void I2C_Start(char write_address)
                 ; 0000 0033 {
                 _I2C_Start:
                 ; .FSTART _I2C_Start
                 ; 0000 0034 TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
000080 d093      	RCALL SUBOPT_0x1
                 ;	write_address -> R17
                 ; 0000 0035 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
                 _0x3:
000081 b7e6      	IN   R30,0x36
000082 78e0      	ANDI R30,LOW(0x80)
000083 f3e9      	BREQ _0x3
                 ; 0000 0036 
                 ; 0000 0037 TWDR = write_address;        /* Write SLA+W in TWI data register */
000084 b913      	OUT  0x3,R17
                 ; 0000 0038 TWCR = (1<<TWEN)|(1<<TWINT);    /* Enable TWI & clear interrupt flag */
000085 e8e4      	LDI  R30,LOW(132)
000086 bfe6      	OUT  0x36,R30
                 ; 0000 0039 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
                 _0x6:
000087 b7e6      	IN   R30,0x36
000088 78e0      	ANDI R30,LOW(0x80)
000089 f3e9      	BREQ _0x6
                 ; 0000 003A }
00008a c013      	RJMP _0x2060002
                 ; .FEND
                 ;void I2C_Repeated_Start(char read_address)
                 ; 0000 003D {
                 _I2C_Repeated_Start:
                 ; .FSTART _I2C_Repeated_Start
                 ; 0000 003E TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);/* Enable TWI, generate start */
00008b d088      	RCALL SUBOPT_0x1
                 ;	read_address -> R17
                 ; 0000 003F while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
                 _0x9:
00008c b7e6      	IN   R30,0x36
00008d 78e0      	ANDI R30,LOW(0x80)
00008e f3e9      	BREQ _0x9
                 ; 0000 0040 
                 ; 0000 0041 TWDR=read_address;        /* Write SLA+R in TWI data register */
00008f b913      	OUT  0x3,R17
                 ; 0000 0042 TWCR=(1<<TWEN)|(1<<TWINT);    /* Enable TWI and clear interrupt flag */
000090 e8e4      	LDI  R30,LOW(132)
000091 bfe6      	OUT  0x36,R30
                 ; 0000 0043 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
                 _0xC:
000092 b7e6      	IN   R30,0x36
000093 78e0      	ANDI R30,LOW(0x80)
000094 f3e9      	BREQ _0xC
                 ; 0000 0044 }
000095 c008      	RJMP _0x2060002
                 ; .FEND
                 ;void I2C_Write(char data)
                 ; 0000 0047 {
                 _I2C_Write:
                 ; .FSTART _I2C_Write
                 ; 0000 0048 TWDR=data;            /* Copy data in TWI data register */
000096 931a      	ST   -Y,R17
000097 2f1a      	MOV  R17,R26
                 ;	data -> R17
000098 b913      	OUT  0x3,R17
                 ; 0000 0049 TWCR=(1<<TWEN)|(1<<TWINT);    /* Enable TWI and clear interrupt flag */
000099 e8e4      	LDI  R30,LOW(132)
00009a bfe6      	OUT  0x36,R30
                 ; 0000 004A while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
                 _0xF:
00009b b7e6      	IN   R30,0x36
00009c 78e0      	ANDI R30,LOW(0x80)
00009d f3e9      	BREQ _0xF
                 ; 0000 004B }
                 _0x2060002:
00009e 9119      	LD   R17,Y+
00009f 9508      	RET
                 ; .FEND
                 ;char I2C_Read_Ack()
                 ; 0000 004E {
                 _I2C_Read_Ack:
                 ; .FSTART _I2C_Read_Ack
                 ; 0000 004F TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); /* Enable TWI, generation of ack */
0000a0 ece4      	LDI  R30,LOW(196)
0000a1 bfe6      	OUT  0x36,R30
                 ; 0000 0050 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
                 _0x12:
0000a2 b7e6      	IN   R30,0x36
0000a3 78e0      	ANDI R30,LOW(0x80)
0000a4 f3e9      	BREQ _0x12
                 ; 0000 0051 return TWDR;            /* Return received data */
0000a5 c005      	RJMP _0x2060001
                 ; 0000 0052 }
                 ; .FEND
                 ;char I2C_Read_Nack()
                 ; 0000 0055 {
                 _I2C_Read_Nack:
                 ; .FSTART _I2C_Read_Nack
                 ; 0000 0056 TWCR=(1<<TWEN)|(1<<TWINT);    /* Enable TWI and clear interrupt flag */
0000a6 e8e4      	LDI  R30,LOW(132)
0000a7 bfe6      	OUT  0x36,R30
                 ; 0000 0057 while(!(TWCR&(1<<TWINT)));    /* Wait until TWI finish its current job */
                 _0x15:
0000a8 b7e6      	IN   R30,0x36
0000a9 78e0      	ANDI R30,LOW(0x80)
0000aa f3e9      	BREQ _0x15
                 ; 0000 0058 return TWDR;        /* Return received data */
                 _0x2060001:
0000ab b1e3      	IN   R30,0x3
0000ac 9508      	RET
                 ; 0000 0059 }
                 ; .FEND
                 ;void I2C_Stop()
                 ; 0000 005C {
                 _I2C_Stop:
                 ; .FSTART _I2C_Stop
                 ; 0000 005D TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
0000ad e9e4      	LDI  R30,LOW(148)
0000ae bfe6      	OUT  0x36,R30
                 ; 0000 005E while(TWCR&(1<<TWSTO));    /* Wait until stop condition execution */
                 _0x18:
0000af b7e6      	IN   R30,0x36
0000b0 fde4      	SBRC R30,4
0000b1 cffd      	RJMP _0x18
                 ; 0000 005F }
0000b2 9508      	RET
                 ; .FEND
                 ;void read(){
                 ; 0000 0063 void read(){
                 _read:
                 ; .FSTART _read
                 ; 0000 0064 /*-------------------------------- Doc do am  ------------------------------------------*/
                 ; 0000 0065 I2C_Start(dht_addr); /* Start I2C with device write address */
0000b3 eba8      	LDI  R26,LOW(184)
0000b4 dfcb      	RCALL _I2C_Start
                 ; 0000 0066 I2C_Write(0x00);        /* Write start memory address */
0000b5 e0a0      	LDI  R26,LOW(0)
0000b6 d062      	RCALL SUBOPT_0x2
                 ; 0000 0067 I2C_Repeated_Start(dht_addr | 1);/* Repeat start I2C SLA+R */
                 ; 0000 0068 value[0] = I2C_Read_Ack();    /* read humidity */
0000b7 93e0 0160 	STS  _value,R30
                 ; 0000 0069 value[1] = I2C_Read_Nack();   /* read humidity scale */
0000b9 dfec      	RCALL _I2C_Read_Nack
                +
0000ba 93e0 0161+STS _value + ( 1 ) , R30
                 	__PUTB1MN _value,1
                 ; 0000 006A I2C_Stop();
0000bc dff0      	RCALL _I2C_Stop
                 ; 0000 006B 
                 ; 0000 006C /*------------------------------- Doc nhiet do -----------------------------------------*/
                 ; 0000 006D I2C_Start(dht_addr); /* Start I2C with device write address */
0000bd eba8      	LDI  R26,LOW(184)
0000be dfc1      	RCALL _I2C_Start
                 ; 0000 006E I2C_Write(0x02);        /* Write start memory address */
0000bf e0a2      	LDI  R26,LOW(2)
0000c0 d058      	RCALL SUBOPT_0x2
                 ; 0000 006F I2C_Repeated_Start(dht_addr | 1);/* Repeat start I2C SLA+R */
                 ; 0000 0070 value[2] = I2C_Read_Ack();    /* read Temperature */
                +
0000c1 93e0 0162+STS _value + ( 2 ) , R30
                 	__PUTB1MN _value,2
                 ; 0000 0071 value[3] = I2C_Read_Nack();   /* read Temperature scale */
0000c3 dfe2      	RCALL _I2C_Read_Nack
                +
0000c4 93e0 0163+STS _value + ( 3 ) , R30
                 	__PUTB1MN _value,3
                 ; 0000 0072 I2C_Stop();
0000c6 dfe6      	RCALL _I2C_Stop
                 ; 0000 0073 /*value[0] = 'a';
                 ; 0000 0074 value[1] = 'b';
                 ; 0000 0075 value[2] = 'c';
                 ; 0000 0076 value[3] = 'd';*/
                 ; 0000 0077 if(UCSRA & (1 << UDRE)){
0000c7 9b5d      	SBIS 0xB,5
0000c8 c001      	RJMP _0x1B
                 ; 0000 0078 UDR = value[j++];
0000c9 d053      	RCALL SUBOPT_0x3
                 ; 0000 0079 }
                 ; 0000 007A }
                 _0x1B:
0000ca 9508      	RET
                 ; .FEND
                 ;interrupt [14] void uart_txc(void)
                 ; 0000 007F {
                 _uart_txc:
                 ; .FSTART _uart_txc
0000cb 93ea      	ST   -Y,R30
0000cc 93fa      	ST   -Y,R31
0000cd b7ef      	IN   R30,SREG
0000ce 93ea      	ST   -Y,R30
                 ; 0000 0080 if(j < 4){
0000cf e0e4      	LDI  R30,LOW(4)
0000d0 e0f0      	LDI  R31,HIGH(4)
0000d1 164e      	CP   R4,R30
0000d2 065f      	CPC  R5,R31
0000d3 f40c      	BRGE _0x1C
                 ; 0000 0081 UDR = value[j++];
0000d4 d048      	RCALL SUBOPT_0x3
                 ; 0000 0082 }
                 ; 0000 0083 }
                 _0x1C:
0000d5 91e9      	LD   R30,Y+
0000d6 bfef      	OUT  SREG,R30
0000d7 91f9      	LD   R31,Y+
0000d8 91e9      	LD   R30,Y+
0000d9 9518      	RETI
                 ; .FEND
                 ;interrupt [12] void uart_rxc(void)
                 ; 0000 0087 {
                 _uart_rxc:
                 ; .FSTART _uart_rxc
0000da d04b      	RCALL SUBOPT_0x4
                 ; 0000 0088 receiv = UDR;
0000db b07c      	IN   R7,12
                 ; 0000 0089 if(receiv == '0'){
0000dc e3e0      	LDI  R30,LOW(48)
0000dd 15e7      	CP   R30,R7
0000de f471      	BRNE _0x1D
                 ; 0000 008A PORTB = 0xFF;
0000df efef      	LDI  R30,LOW(255)
0000e0 bbe8      	OUT  0x18,R30
                 ; 0000 008B j = 0;
0000e1 2444      	CLR  R4
0000e2 2455      	CLR  R5
                 ; 0000 008C value[0] = value[1] = value[3] = value[2] = 0;
0000e3 e0e0      	LDI  R30,LOW(0)
                +
0000e4 93e0 0162+STS _value + ( 2 ) , R30
                 	__PUTB1MN _value,2
                +
0000e6 93e0 0163+STS _value + ( 3 ) , R30
                 	__PUTB1MN _value,3
                +
0000e8 93e0 0161+STS _value + ( 1 ) , R30
                 	__PUTB1MN _value,1
0000ea 93e0 0160 	STS  _value,R30
                 ; 0000 008D read();
0000ec dfc6      	RCALL _read
                 ; 0000 008E }
                 ; 0000 008F receiv = '1';
                 _0x1D:
0000ed e3e1      	LDI  R30,LOW(49)
0000ee 2e7e      	MOV  R7,R30
                 ; 0000 0090 }
0000ef c005      	RJMP _0x22
                 ; .FEND
                 ;interrupt [9] void timer_trans(void)
                 ; 0000 0093 {
                 _timer_trans:
                 ; .FSTART _timer_trans
0000f0 d035      	RCALL SUBOPT_0x4
                 ; 0000 0094 TCNT1 = 65047;
0000f1 d01d      	RCALL SUBOPT_0x0
                 ; 0000 0095 j = 0;
0000f2 2444      	CLR  R4
0000f3 2455      	CLR  R5
                 ; 0000 0096 read();
0000f4 dfbe      	RCALL _read
                 ; 0000 0097 }
                 _0x22:
0000f5 91e9      	LD   R30,Y+
0000f6 bfef      	OUT  SREG,R30
0000f7 91f9      	LD   R31,Y+
0000f8 91e9      	LD   R30,Y+
0000f9 91b9      	LD   R27,Y+
0000fa 91a9      	LD   R26,Y+
0000fb 9199      	LD   R25,Y+
0000fc 9189      	LD   R24,Y+
0000fd 9179      	LD   R23,Y+
0000fe 9169      	LD   R22,Y+
0000ff 90f9      	LD   R15,Y+
000100 9019      	LD   R1,Y+
000101 9009      	LD   R0,Y+
000102 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 009D {
                 _main:
                 ; .FSTART _main
                 ; 0000 009E init();
000103 df69      	RCALL _init
                 ; 0000 009F DDRA = 0xFF;
000104 efef      	LDI  R30,LOW(255)
000105 bbea      	OUT  0x1A,R30
                 ; 0000 00A0 DDRB = 0xFF;
000106 bbe7      	OUT  0x17,R30
                 ; 0000 00A1 while (1)
                 _0x1E:
                 ; 0000 00A2 {
                 ; 0000 00A3 WDT_ON();
000107 df5e      	RCALL _WDT_ON
                 ; 0000 00A4 PORTA = 0xFF;
000108 efef      	LDI  R30,LOW(255)
000109 d02a      	RCALL SUBOPT_0x5
                 ; 0000 00A5 delay_ms(100);
                 ; 0000 00A6 WDT_OFF();
00010a df5d      	RCALL _WDT_OFF
                 ; 0000 00A7 
                 ; 0000 00A8 PORTA = 0x00;
00010b e0e0      	LDI  R30,LOW(0)
00010c d027      	RCALL SUBOPT_0x5
                 ; 0000 00A9 delay_ms(100);
                 ; 0000 00AA }
00010d cff9      	RJMP _0x1E
                 ; 0000 00AB }
                 _0x21:
00010e cfff      	RJMP _0x21
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _value:
000160           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00010f e1e7      	LDI  R30,LOW(65047)
000110 effe      	LDI  R31,HIGH(65047)
000111 bdfd      	OUT  0x2C+1,R31
000112 bdec      	OUT  0x2C,R30
000113 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000114 931a      	ST   -Y,R17
000115 2f1a      	MOV  R17,R26
000116 eae4      	LDI  R30,LOW(164)
000117 bfe6      	OUT  0x36,R30
000118 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000119 df7c      	RCALL _I2C_Write
00011a eba9      	LDI  R26,LOW(185)
00011b df6f      	RCALL _I2C_Repeated_Start
00011c cf83      	RJMP _I2C_Read_Ack
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
00011d 01f2      	MOVW R30,R4
00011e 9631      	ADIW R30,1
00011f 012f      	MOVW R4,R30
000120 9731      	SBIW R30,1
000121 5ae0      	SUBI R30,LOW(-_value)
000122 4ffe      	SBCI R31,HIGH(-_value)
000123 81e0      	LD   R30,Z
000124 b9ec      	OUT  0xC,R30
000125 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x4:
000126 920a      	ST   -Y,R0
000127 921a      	ST   -Y,R1
000128 92fa      	ST   -Y,R15
000129 936a      	ST   -Y,R22
00012a 937a      	ST   -Y,R23
00012b 938a      	ST   -Y,R24
00012c 939a      	ST   -Y,R25
00012d 93aa      	ST   -Y,R26
00012e 93ba      	ST   -Y,R27
00012f 93ea      	ST   -Y,R30
000130 93fa      	ST   -Y,R31
000131 b7ef      	IN   R30,SREG
000132 93ea      	ST   -Y,R30
000133 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000134 bbeb      	OUT  0x1B,R30
000135 e6a4      	LDI  R26,LOW(100)
000136 e0b0      	LDI  R27,0
000137 c000      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 _delay_ms:
000138 9610      	adiw r26,0
000139 f039      	breq __delay_ms1
                 __delay_ms0:
00013a 95a8      	wdr
                +
00013b ef8a     +LDI R24 , LOW ( 0xFA )
00013c e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00013d 9701     +SBIW R24 , 1
00013e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00013f 9711      	sbiw r26,1
000140 f7c9      	brne __delay_ms0
                 __delay_ms1:
000141 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   0 r7 :   3 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   8 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  11 r25:   5 r26:  15 r27:   5 r28:   1 r29:   1 r30: 110 r31:  12 
x  :   3 y  :  33 z  :   8 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   9 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   1 cpi   :   0 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  12 inc   :   0 jmp   :  22 ld    :  17 ldd   :   0 ldi   :  50 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   3 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  35 pop   :   0 push  :   0 rcall :  25 ret   :  11 
reti  :   2 rjmp  :  12 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :   6 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  20 std   :   0 sts   :   8 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 31 out of 116 (26.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000284    614     30    644   16384   3.9%
[.dseg] 0x000060 0x00016a      0     10     10    1024   1.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
